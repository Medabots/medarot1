version: 2.1

executors:
  rom-executor:
    docker:
      - image: variantxyz/rgbds-20200806:cb4fbdfcd534e43a5f8504b405acd7b8b29f5001
    working_directory: /tmp

jobs:
  build:
    executor: rom-executor
    parameters:
      use-latest-translations:
        type: boolean
        default: false
      use-latest-translation-versioned:
        type: boolean
        default: false
      create-tag:
        type: boolean
        default: false
      use-latest-tag:
        type: boolean
        default: false
    docker:
      - image: variantxyz/rgbds-20200806:cb4fbdfcd534e43a5f8504b405acd7b8b29f5001
    steps:
      - add_ssh_keys:
          fingerprints:
            - "cf:2d:dc:82:0c:e0:3d:e1:e3:e8:44:b9:e9:77:fb:5c" # Machine User Key with collaborator access to baserom and medarot1
      - checkout:
          path: medarot_1
      - run:
          name: "Print Tool Versions"
          command: |
            git --version
            rgbasm --version
            python3 --version
      - run:
          name: "Get base"
          command: |
            git clone --quiet $BASEROM_REPO medarot_baserom
            cp medarot_baserom/medarot_kabuto.gb medarot_1/baserom_kabuto.gb
            cp medarot_baserom/medarot_kuwagata.gb medarot_1/baserom_kuwagata.gb
      - when:
          condition: << parameters.use-latest-tag >>
          steps:
            - run:
                name: "Checkout latest tag"
                working_directory: medarot_1
                command: | # Checkout the latest created tag
                  git fetch --tags
                  git checkout `git rev-list --tags --max-count=1`    
      - when:
          condition: << parameters.use-latest-translations >>
          steps:
            - when:
                condition: << parameters.use-latest-translation-versioned >>
                steps:
                  - run:
                      name: "Download latest text from repository"
                      command: wget -q --no-check-certificate "$TRANSLATION_SHEET_REPO_URL" -O ~/sheet.xlsx
            - unless:
                condition: << parameters.use-latest-translation-versioned >>
                steps:
                  - run:
                      name: "Download latest text from source"
                      command: wget -q --no-check-certificate "$TRANSLATION_SHEET_SOURCE_URL" -O ~/sheet.xlsx
            - run:
                name: "Update Dialog"
                working_directory: medarot_1
                command: python3 scripts/xlsx2csv.py ~/sheet.xlsx ./text/dialog America StoryText1 StoryText2 StoryText3 Snippet1 Snippet2 Snippet3 Snippet4 Snippet5 BattleText
            - run:
                name: "Update Credits"
                working_directory: medarot_1
                command: python3 scripts/xlsx2csv.py ~/sheet.xlsx ./text/credits America Credits
            - run:
                name: "Update Lists"
                working_directory: medarot_1
                command: python3 scripts/xlsx2list.py ~/sheet.xlsx ./text/lists America HeadParts RightParts LeftParts LegParts Items Medarots Medals
            - run:
                name: "Update Pointer Lists"
                working_directory: medarot_1
                command: python3 scripts/xlsx2list.py ~/sheet.xlsx ./text/ptrlists America Attacks Attributes Medarotters PartDescriptions PartTypes Skills
            - run:
                name: "Update Text Version"
                working_directory: medarot_1
                command: python3 scripts/xlsx_dump_version.py ~/sheet.xlsx ./text/patch/text_version.txt EN-US
      - run:
          name: "Build ROM"
          working_directory: medarot_1
          command: |
            export SHORT_HASH=`echo $CIRCLE_SHA1 | cut -c -7`
            export PIPELINE_NUMBER=<< pipeline.number >>
            make all -j
      - when:
          condition: << parameters.create-tag >>
          steps:
            - run:
                name: "Create Tag if version.txt specifies a new tag"
                working_directory: medarot_1
                command: |
                  git config user.email ${USER_EMAIL}
                  git config user.name "CI Bot"

                  export VERSION=`cat ./text/patch/version.txt ./text/patch/text_version.txt | tr -d '\n'`
                  git commit -am "Nightly build - ${VERSION}" || exit 0
                  git tag ${VERSION:1} || exit 0
                  git push origin ${VERSION:1} || exit 0

      - run:
          name: "Generate Patch"
          command: |
            mkdir patch
            ips_util create medarot_1/baserom_kabuto.gb medarot_1/medarot_kabuto.gb -o patch/m1kabuto-<<pipeline.number>>-<<pipeline.git.revision>>.ips
            ips_util create medarot_1/baserom_kuwagata.gb medarot_1/medarot_kuwagata.gb -o patch/m1kuwagata-<<pipeline.number>>-<<pipeline.git.revision>>.ips
            ips_util create medarot_1/baserom_kabuto.gb medarot_1/medarot_kabuto_portraits.gb -o patch/m1kabuto-portraits-<<pipeline.number>>-<<pipeline.git.revision>>.ips
            ips_util create medarot_1/baserom_kuwagata.gb medarot_1/medarot_kuwagata_portraits.gb -o patch/m1kuwagata-portraits-<<pipeline.number>>-<<pipeline.git.revision>>.ips
            cp medarot_1/build/patch/version.txt patch/version.txt
            sha1sum medarot_1/medarot_kabuto.gb > patch/kabuto.sha1
            sha1sum medarot_1/medarot_kuwagata.gb > patch/kuwagata.sha1
            sha1sum medarot_1/medarot_kabuto_portraits.gb > patch/kabuto_portraits.sha1
            sha1sum medarot_1/medarot_kuwagata_portraits.gb > patch/kuwagata_portraits.sha1
      - store_artifacts:
          path: patch/
          destination: patch
      - persist_to_workspace:
          root: patch
          paths:
            - .

  release:
    executor: rom-executor
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: patch
      - store_artifacts:
          path: patch
          destination: patch
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=$CIRCLE_TAG
            ghr -t ${GHR_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./patch/

workflows:
  workflow:
    jobs:
      - build:
          name: "Build ROMs"
          use-latest-translations: false
      - build:
          name: "Build ROMs - Latest Translations"
          use-latest-translations: true
          filters:
            tags:
              only: /(?<=^[Vv]|^)(?:(?<major>(?:0|[1-9](?:(?:0|[1-9])+)*))[.](?<minor>(?:0|[1-9](?:(?:0|[1-9])+)*))[.](?<patch>(?:0|[1-9](?:(?:0|[1-9])+)*))(?:-(?<prerelease>(?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:0|[1-9](?:(?:0|[1-9])+)*))(?:[.](?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:0|[1-9](?:(?:0|[1-9])+)*)))*))?(?:[+](?<build>(?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:(?:0|[1-9])+))(?:[.](?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:(?:0|[1-9])+)))*))?)$/
      - release:
          name: "Release"
          requires:
            - "Build ROMs - Latest Translations"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /(?<=^[Vv]|^)(?:(?<major>(?:0|[1-9](?:(?:0|[1-9])+)*))[.](?<minor>(?:0|[1-9](?:(?:0|[1-9])+)*))[.](?<patch>(?:0|[1-9](?:(?:0|[1-9])+)*))(?:-(?<prerelease>(?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:0|[1-9](?:(?:0|[1-9])+)*))(?:[.](?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:0|[1-9](?:(?:0|[1-9])+)*)))*))?(?:[+](?<build>(?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:(?:0|[1-9])+))(?:[.](?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:(?:0|[1-9])+)))*))?)$/

  # Though this runs on tr_EN, it will actually checkout the latest tag
  nightly:
    triggers:
      - schedule:
          cron: "0 7 * * *"
          filters:
            branches:
              only:
                - tr_EN
    jobs:
      - build:
          name: "Nightly Build Tag"
          use-latest-translations: true
          use-latest-translation-versioned: true
          create-tag: true
          use-latest-tag: true

  initial: # Initial tag, similar to nightly but happens on initial build
    jobs:
      - build:
          name: "Initial Release Tag"
          use-latest-translations: true
          use-latest-translation-versioned: true
          create-tag: true
          use-latest-tag: false # Uses current tag
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /(?<=^[Vv]|^)(?:(?<major>(?:0|[1-9](?:(?:0|[1-9])+)*))[.](?<minor>(?:0|[1-9](?:(?:0|[1-9])+)*))[.](?<patch>(?:0|[1-9](?:(?:0|[1-9])+)*))(?:-(?<prerelease>(?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:0|[1-9](?:(?:0|[1-9])+)*))(?:[.](?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:0|[1-9](?:(?:0|[1-9])+)*)))*))?(?:[+](?<build>(?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:(?:0|[1-9])+))(?:[.](?:(?:(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?|(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)(?:[A-Za-z]|-)(?:(?:(?:0|[1-9])|(?:[A-Za-z]|-))+)?)|(?:(?:0|[1-9])+)))*))?)$/
